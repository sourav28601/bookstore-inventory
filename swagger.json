{
  "openapi": "3.0.0",
  "info": {
    "title": "Bookstore API",
    "version": "1.0.0",
    "description": "API for managing bookstore inventory, orders, and user authentication"
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "User authentication endpoints"
    },
    {
      "name": "Books",
      "description": "Book management endpoints"
    },
    {
      "name": "Orders",
      "description": "Order management endpoints"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Book": {
        "type": "object",
        "properties": {
          "title": { "type": "string" },
          "author": { "type": "string" },
          "genre": { "type": "string" },
          "isbn": { "type": "string" },
          "price": { "type": "number", "format": "float" },
          "description": { "type": "string" },
          "stockQuantity": { "type": "integer", "minimum": 0 }
        },
        "required": [
          "title",
          "author",
          "genre",
          "isbn",
          "price",
          "stockQuantity"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string" },
          "bookId": { "type": "string" },
          "quantity": { "type": "integer", "minimum": 1 },
          "totalPrice": { "type": "number", "format": "float" },
          "orderDate": { "type": "string", "format": "date-time" },
          "status": {
            "type": "string",
            "enum": ["Pending", "Completed", "Cancelled"]
          }
        },
        "required": [
          "orderId",
          "bookId",
          "quantity",
          "totalPrice",
          "orderDate",
          "status"
        ]
      },
      "Login": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string", "format": "password" }
        },
        "required": ["email", "password"]
      },
      "Signup": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string", "format": "password" }
        },
        "required": ["name", "email", "password"]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": { "type": "string" },
          "message": { "type": "string" },
          "user": {
            "type": "object",
            "properties": {
              "id": { "type": "string" },
              "email": { "type": "string" }
            }
          }
        }
      },
      "SignupResponse": {
        "type": "object",
        "properties": {
          "token": { "type": "string" },
          "message": { "type": "string" },
          "user": {
            "type": "object",
            "properties": {
              "id": { "type": "string" },
              "email": { "type": "string" },
              "name": { "type": "string" }
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string" }
        }
      }
    }
  },
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "description": "Authenticate user and return a token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "User signup",
        "description": "Register a new user and return a token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Signup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/book/create": {
      "post": {
        "tags": ["Books"],
        "summary": "Create a new book",
        "description": "Add a new book to the inventory",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book created successfully"
          },
          "400": {
            "description": "Invalid request parameters"
          }
        }
      }
    },
 "/book/all": {
  "get": {
    "tags": ["Books"],
    "summary": "Get all books",
    "description": "Retrieve a list of books with optional filtering and pagination",
    "parameters": [
      {
        "in": "query",
        "name": "genre",
        "schema": {
          "type": "string"
        },
        "description": "Filter books by genre"
      },
      {
        "in": "query",
        "name": "author",
        "schema": {
          "type": "string"
        },
        "description": "Filter books by author"
      },
      {
        "in": "query",
        "name": "minPrice",
        "schema": {
          "type": "number",
          "minimum": 0
        },
        "description": "Filter books by minimum price"
      },
      {
        "in": "query",
        "name": "maxPrice",
        "schema": {
          "type": "number",
          "minimum": 0
        },
        "description": "Filter books by maximum price"
      },
      {
        "in": "query",
        "name": "page",
        "schema": {
          "type": "integer",
          "minimum": 1
        },
        "description": "Page number for pagination (default: 1)"
      },
      {
        "in": "query",
        "name": "limit",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100
        },
        "description": "Number of results per page (default: 10, max: 100)"
      }
    ],
    "responses": {
      "200": {
        "description": "List of books retrieved successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "books": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                },
                "pagination": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "pages": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
},

    "/book/update/{id}": {
      "put": {
        "tags": ["Books"],
        "summary": "Update a book",
        "description": "Update the details of a specific book by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the book"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book updated successfully"
          },
          "400": {
            "description": "Invalid request parameters"
          }
        }
      }
    },
    "/book/delete/{id}": {
      "delete": {
        "tags": ["Books"],
        "summary": "Delete a book",
        "description": "Delete a book by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the book"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Book deleted successfully"
          },
          "404": {
            "description": "Book not found"
          }
        }
      }
    },
    "/order/create": {
      "post": {
        "tags": ["Orders"],
        "summary": "Create a new order",
        "description": "Create an order with detailed validation for items and customer.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customer": {
                    "type": "string",
                    "description": "Customer ID (must be a valid MongoDB ObjectId)"
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "book": {
                          "type": "string",
                          "description": "Book ID (must be a valid MongoDB ObjectId)"
                        },
                        "quantity": {
                          "type": "integer",
                          "minimum": 1,
                          "description": "Quantity of the book (at least 1)"
                        },
                        "price": {
                          "type": "number",
                          "minimum": 0,
                          "description": "Price of the book (non-negative)"
                        }
                      },
                      "required": ["book", "quantity", "price"]
                    },
                    "minItems": 1
                  }
                },
                "required": ["customer", "items"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully"
          },
          "400": {
            "description": "Invalid input or insufficient stock"
          },
          "409": {
            "description": "Conflict - Insufficient stock for items"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/order/all": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get all orders",
        "description": "Retrieve orders with optional filters and pagination",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "customer",
            "schema": {
              "type": "string",
              "format": "email"
            },
            "description": "Filter by customer email"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "Pending",
                "Processing",
                "Shipped",
                "Delivered",
                "Cancelled"
              ]
            },
            "description": "Filter by order status"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter by start date (inclusive)"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter by end date (inclusive, must be after startDate)"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number for pagination (default: 1)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of results per page (default: 10, max: 100)"
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/order/update/{id}": {
      "put": {
        "tags": ["Orders"],
        "summary": "Update an order",
        "description": "Update the status or items of an order with validation.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Order ID (must be a valid MongoDB ObjectId)"
            }
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "Pending",
                      "Processing",
                      "Shipped",
                      "Delivered",
                      "Cancelled"
                    ],
                    "description": "New status for the order"
                  },
                  "books": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "book": {
                          "type": "string",
                          "description": "Book ID (must be a valid MongoDB ObjectId)"
                        },
                        "quantity": {
                          "type": "integer",
                          "minimum": 1,
                          "description": "Quantity of the book"
                        },
                        "price": {
                          "type": "number",
                          "minimum": 0,
                          "description": "Price of the book"
                        },
                        "totalPrice": {
                          "type": "number",
                          "minimum": 0,
                          "description": "Total price of the book (quantity * price)"
                        }
                      },
                      "required": ["book", "quantity", "price", "totalPrice"]
                    },
                    "minItems": 1
                  }
                },
                "oneOf": [{ "required": ["status"] }, { "required": ["books"] }]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated successfully"
          },
          "400": {
            "description": "Invalid request or insufficient stock"
          },
          "404": {
            "description": "Order not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/order/delete/{id}": {
      "delete": {
        "tags": ["Orders"],
        "summary": "Delete an order",
        "description": "Deletes an order by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Order ID (must be a valid MongoDB ObjectId)"
            }
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Order deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Order deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Order ID format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Order not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
